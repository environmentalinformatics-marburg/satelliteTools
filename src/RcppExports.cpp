// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// difference
NumericVector difference(double x, NumericVector y);
RcppExport SEXP _satelliteTools_difference(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(difference(x, y));
    return rcpp_result_gen;
END_RCPP
}
// isNA
LogicalVector isNA(NumericVector x);
RcppExport SEXP _satelliteTools_isNA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(isNA(x));
    return rcpp_result_gen;
END_RCPP
}
// naOmit
NumericVector naOmit(NumericVector x);
RcppExport SEXP _satelliteTools_naOmit(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(naOmit(x));
    return rcpp_result_gen;
END_RCPP
}
// whichMin
int whichMin(NumericVector x);
RcppExport SEXP _satelliteTools_whichMin(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(whichMin(x));
    return rcpp_result_gen;
END_RCPP
}
// barometricFormula
double barometricFormula(double z, NumericVector gp, NumericVector ta, IntegerVector p);
RcppExport SEXP _satelliteTools_barometricFormula(SEXP zSEXP, SEXP gpSEXP, SEXP taSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type gp(gpSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ta(taSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(barometricFormula(z, gp, ta, p));
    return rcpp_result_gen;
END_RCPP
}
// run_barometricFormula
NumericVector run_barometricFormula(NumericMatrix a, NumericMatrix b, NumericVector dem, IntegerVector p);
RcppExport SEXP _satelliteTools_run_barometricFormula(SEXP aSEXP, SEXP bSEXP, SEXP demSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dem(demSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(run_barometricFormula(a, b, dem, p));
    return rcpp_result_gen;
END_RCPP
}
// mSpecIndicesCPP
List mSpecIndicesCPP(NumericVector blue, NumericVector green, NumericVector red, NumericVector nir);
RcppExport SEXP _satelliteTools_mSpecIndicesCPP(SEXP blueSEXP, SEXP greenSEXP, SEXP redSEXP, SEXP nirSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type blue(blueSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type green(greenSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type red(redSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nir(nirSEXP);
    rcpp_result_gen = Rcpp::wrap(mSpecIndicesCPP(blue, green, red, nir));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_satelliteTools_difference", (DL_FUNC) &_satelliteTools_difference, 2},
    {"_satelliteTools_isNA", (DL_FUNC) &_satelliteTools_isNA, 1},
    {"_satelliteTools_naOmit", (DL_FUNC) &_satelliteTools_naOmit, 1},
    {"_satelliteTools_whichMin", (DL_FUNC) &_satelliteTools_whichMin, 1},
    {"_satelliteTools_barometricFormula", (DL_FUNC) &_satelliteTools_barometricFormula, 4},
    {"_satelliteTools_run_barometricFormula", (DL_FUNC) &_satelliteTools_run_barometricFormula, 4},
    {"_satelliteTools_mSpecIndicesCPP", (DL_FUNC) &_satelliteTools_mSpecIndicesCPP, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_satelliteTools(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
